
 -- PROGRAMMERING 2 -------------------------------------------------
  ________  ________  ___       ___  ________          ________      
 |\   __  \|\   __  \|\  \     |\  \|\   ____\        |\   ____\     
 \ \  \|\  \ \  \|\ /\ \  \    \ \  \ \  \___|        \ \  \___|_    
  \ \  \\\  \ \   __  \ \  \    \ \  \ \  \  ___       \ \_____  \   
   \ \  \\\  \ \  \|\  \ \  \____\ \  \ \  \|\  \       \|____|\  \  
    \ \_______\ \_______\ \_______\ \__\ \_______\        ____\_\  \ 
     \|_______|\|_______|\|_______|\|__|\|_______|       |\_________\
                                                         \|_________| 

 -- TEORI DEL -------------------------------------------------------


 Oppgave 1 ----------------------------------------------------------
 
    * Exception

        En exception er noe uventet som forstyrrer den forventede 
        program flyten. Det finnes mange ulike exceptions og disse 
        kan behandles ved hjelp av en try-catch block.

        +- Eksempel ----------------------+
        |                                 |
        |  try {                          |
        |      // CODE                    | 
        |  }                              |
        |  catch(Exception e) {           |
        |      // CODE                    |
        |  }                              |
        |                                 |
        +---------------------------------+
    
    * Tråd

        En Java applikasjon kan deles opp i flere prosesser (deler), 
        som kan kjøre kopliserte kodesekvenser, uten å forstyrre 
        main prosessen (hoved delen av programmet). Slik kan man 
        spre ut belastningen av applikasjonen og skape en bedre og 
        raskere brukeropplevelse.

    * Collections framework

        Javas Collections framework er et set med klasser og 
        interfaces for å konstruere kjente gjenbrukbare data-
        strukturer, som f.eks. List, HashMap, Queue og Stack.

        - List

            Er et interface for lagre og modifisere strukturerte 
            data. Det finnes mange implementasjoner av List, som 
            f.eks. ArrayList eller LinkedList.

        - HashMap

            Er en datastruktur, hvor et object lenkes til et annet.
            I praksis betyr dette at man har en key (et objekt), 
            som peker på en value (et annet objekt).

            +- Eksempel ------------------------+
            |                                   |
            |  key (string) -> value (Boolean)  |
            |                                   |
            +-----------------------------------+

            HashMap, i likhet med andre datastrukturer har et set 
            med metoder, som kan benyttes til å manipulere data-
            strukturen.

        - Queue

            Er en datastruktur, som bygger på FIFO prinsippet. 
            Dette vil si at det første elementet lagt til i listen, 
            er det første elementet, som skal ut av listen.

            +- Eksempel ---------------+
            |                          |
            |  Inn -> [2][1][0] <- Ut  |
            |                          |
            +--------------------------+

        - Stack

            Er en datastruktur, som bygger på LIFO prinsippet.
            Dette vil si at det siste elementet lagt til i listen, 
            er det første elementet, som skal ut av listen.

            +- Eksempel ---------------+
            |                          |
            |  Inn / ut <-> [2][1][0]  |
            |                          |
            +--------------------------+


 Oppgave 2 ----------------------------------------------------------

    *NB: Sammenlikner min løsning av oblig 4, med løsningsforslaget
    som ligger ute, etter tillatelse fra Lars Emil.

    Det er mye likt i begge løsningene våre, men en gjennomgående 
    forskjell er at min løsning er i stor grad bygget på å bruke 
    standard java Arrays, mens løsningsforslaget benytter ArrayList. 
    I retrospekt tenker jeg at det hadde vært mye smartere å ta i bruk 
    ArrayList fra starten av, da vanlig Array ikke er dynamisk og 
    skapte derfor ofte problemer under oppgavene.

    En annen forskjell er at løsningsforslaget i større grad har 
    delt inn logikken i flere gjennbrukbare metoder. F.eks. har 
    løsningsforlaget en metode for å legge til en planet, det har
    ikke min løsning, som vil si at jeg må generere et helt nytt 
    Array hver gang. Dette er delevis pga. at løsningen min bruker 
    vanlige Java Arrays.
